{
  "db_name": "PostgreSQL",
  "query": "\n            WITH RECURSIVE dependent_computations(tenant_id, output_handle, dependencies, fhe_operation, is_scalar, produced_handles) AS (\n                SELECT c.tenant_id, c.output_handle, c.dependencies, c.fhe_operation, c.is_scalar, ARRAY[ROW(c.tenant_id, c.output_handle)]\n                FROM computations c\n                WHERE is_completed = false\n                AND is_error = false\n                AND NOT EXISTS (\n                    SELECT 1\n                    FROM unnest(c.dependencies) WITH ORDINALITY AS elems(v, dep_index)\n                    WHERE (c.tenant_id, elems.v) NOT IN ( SELECT tenant_id, handle FROM ciphertexts )\n                    -- don't select scalar operands\n                    AND (\n                        NOT c.is_scalar\n                        OR c.is_scalar AND NOT elems.dep_index = 2\n                    )\n                    -- ignore fhe random, trivial encrypt operations, all inputs are scalars\n                    AND NOT c.fhe_operation = ANY(ARRAY[24, 26, 27])\n                )\n              UNION ALL\n                SELECT c.tenant_id, c.output_handle, c.dependencies, c.fhe_operation, c.is_scalar, dc.produced_handles || ROW(c.tenant_id, c.output_handle)\n                FROM dependent_computations dc, computations c\n                WHERE is_completed = false\n                AND is_error = false\n                AND NOT EXISTS (\n                    SELECT 1\n                    FROM unnest(c.dependencies) WITH ORDINALITY AS elems(v, dep_index)\n                    WHERE (c.tenant_id, elems.v) NOT IN ( SELECT tenant_id, handle FROM ciphertexts )\n                    AND NOT ROW(c.tenant_id, elems.v) = ANY(dc.produced_handles)\n                    -- don't select scalar operands\n                    AND (\n                        NOT c.is_scalar\n                        OR c.is_scalar AND NOT elems.dep_index = 2\n                    )\n                    -- ignore fhe random, trivial encrypt operations, all inputs are scalars\n                    AND NOT c.fhe_operation = ANY(ARRAY[24, 26, 27])\n                )\n                AND dc.output_handle = ANY(c.dependencies)\n                AND dc.tenant_id = c.tenant_id\n                AND NOT ROW(c.tenant_id, c.output_handle) = ANY(dc.produced_handles)\n            ) SEARCH DEPTH FIRST BY output_handle SET computation_order,\n           limited_computations AS (\n              SELECT tenant_id, output_handle\n              FROM dependent_computations\n              GROUP BY tenant_id, output_handle\n              ORDER BY min(computation_order)\n              LIMIT $1\n            )\n            SELECT tenant_id, output_handle, dependencies, fhe_operation, is_scalar\n            FROM computations\n            WHERE (tenant_id, output_handle) IN (\n              SELECT tenant_id, output_handle FROM limited_computations\n            )\n            FOR UPDATE SKIP LOCKED\n        ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "tenant_id",
        "type_info": "Int4"
      },
      {
        "ordinal": 1,
        "name": "output_handle",
        "type_info": "Bytea"
      },
      {
        "ordinal": 2,
        "name": "dependencies",
        "type_info": "ByteaArray"
      },
      {
        "ordinal": 3,
        "name": "fhe_operation",
        "type_info": "Int2"
      },
      {
        "ordinal": 4,
        "name": "is_scalar",
        "type_info": "Bool"
      }
    ],
    "parameters": {
      "Left": [
        "Int8"
      ]
    },
    "nullable": [
      false,
      false,
      false,
      false,
      false
    ]
  },
  "hash": "9d7dd33f60a053cf0f7e9a480d32ae6aaf684011580f0534afb25e0dd39d50a9"
}
